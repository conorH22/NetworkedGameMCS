/* server with forking for hangman game*/
/* with signal handling and DieWithMessage*/
/*student name :Conor Holmes*/
/*student Number:k00177426*/

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <syslog.h>
#include <signal.h>
#include <errno.h>
#include <netdb.h>
#include <string.h>
#include "Practical.h"

extern time_t time ();

typedef void Sigfunc(int);
/*function prototypes*/
Sigfunc * signal_setup(int sigo, Sigfunc * func); /*set up POSIX sigalhandling*/
void sig_chld(int signo); //signal handler for SIGCHLD

/*int setupTCPServerSocket(const char *);*/
/*static const int MAXPENDING = 5; // MAXIMUM outstanding /*connection requests */
 int maxlives = 12;
 char *word [] = {
 #include "words"
 };

#define NUM_OF_WORDS (sizeof (word) / sizeof (word [0]))
#define MAXLEN 80 /* Maximum size in the world of Any string */
#define HANGMAN_TCP_PORT 1066
/* Get sockaddr, Ipv4 or IPv6*/
/*void * get_in_addr(struct sockaddr *sa)
{
	if(sa->sa_family ==AF_INET){
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}
	
	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}
*/
int main( int argc, char *argv[] ) {
	int sockfd, newsockfd, portno, clilen;
	int n; 
	pid_t pid; 	
	char buffer[256];
	struct sockaddr_in serv_addr,cli_addr;
	/*struct sockaddr_storage ;*/
	/*socklen_t sin_size;*/
	/*char s[INET6_ADDRSTRLEN];*/
    	
	srand ((int) time ((long *) 0)); /* randomize the seed */
   
   
   /* socket() function is called */
   sockfd = socket(AF_INET, SOCK_STREAM, 0);
   
   if (sockfd < 0) {
		DieWithSystemMessage("socket() failed");      
		
   }
   
   /* Initialize socket structure */
   bzero((char *) &serv_addr, sizeof(serv_addr));
   /*portno = 5001;*/
   
   serv_addr.sin_family = AF_INET;
   serv_addr.sin_addr.s_addr = INADDR_ANY;
   serv_addr.sin_port = htons(HANGMAN_TCP_PORT);
   
   /* Now bind the host address using bind() call.*/
   if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
		DieWithSystemMessage("bind() failed");
   }
   
   /* Now start listening for the clients, here
      * process will go in sleep mode and will wait
      * for the incoming connection
   */
   
   listen(sockfd,5);
   signal_setup(SIGCHLD, sig_chld);
   clilen = sizeof(cli_addr);
  // printf("Server waiting for connections...");
   while (1) {
   		newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
		
      if (newsockfd < 0) {
	  	DieWithSystemMessage("Accept() failed");
      }
	/*inet_ntop(cli_addr,
	get_in_addr((struct sockaddr *)&cli_addr),
	s, sizeof s);
	printf("Server:Got connection from %s<n",s); */
      
      /* Create child process */
      pid = fork();
		
      if (pid < 0) {
      		DieWithSystemMessage("Fork() Error");
      }
      
      if (pid == 0) {
         /* The client process with srand functio to randomize the list of words for the word file */
		 srand ((int) time ((long *) 0));
         close(sockfd);
	 	play_hangman(newsockfd, newsockfd);
         //exit(3);
		close(play_hangman);
      }
      else {
	 
         close(newsockfd);
      }
		
   } 
}

// sigfunc Functions Defintions
Sigfunc * signal_setup(int signo, Sigfunc *func){
struct sigaction act, oact;
	act.sa_handler = func;
	sigemptyset(&act.sa_mask);
	act.sa_flags = 0;
	if(signo == SIGALRM) {
#ifdef	SA_INTERRUPT
		act.sa_flags |= SA_INTERRUPT; /* SunOS 4.x */
#endif 
	}else{
#ifdef SA_RESTART
		act.sa_flags |= SA_RESTART;  /* SVR4, 44BSD */
#endif
	}	
	if (sigaction(signo, &act, &oact) < 0)
		return(SIG_ERR);
	return(oact.sa_handler); 
}
/*sig chld calls waitpid for all term children
1st arg specifies the processs id to wait for -1 which waits for the 1st child to terminate
2nd arg terminates status
3rd arg options uses WNOHANG  checks if any zombie-children exists if o prints statement*/

void sig_chld(int signo)
{
	pid_t pid;
	int stat;
	
	while ( (pid = waitpid(-1, & stat, WNOHANG)) > 0)
		printf("child %d terminated\n", pid);
		//close(pid);
		return;
}
play_hangman(int in, int out)
{
	char * all_word, part_word [MAXLEN],
	guess[MAXLEN], outbuf [MAXLEN];

	int lives = maxlives;
	int game_state = 'I';// I = Incomplete
	int i, good_guess, word_length;
	char hostname[MAXLEN];

	gethostname (hostname, MAXLEN);
	sprintf(outbuf, "playing hangman on host %s: \n \n", hostname);
	write(out, outbuf, strlen(outbuf));

	/*pick a word at random from list */
	all_word = word[rand() % NUM_OF_WORDS];
	word_length = strlen(all_word);
	syslog (LOG_USER | LOG_INFO, "Server chose hangman word %s",all_word);

	/* No letters are guessed Initially */
	for (i = 0; i < word_length; i++)
		part_word[i]= '-';

	part_word[i] = '\0';

	sprintf (outbuf, "%s %d \n", part_word, lives);
	write (out, outbuf, strlen(outbuf));

	while ( game_state == 'I')
	/* Get a letter from player guess */
	{
		while( read (in, guess,MAXLEN) <0) {
			if(errno != EINTR)
				exit(4);
			printf("re-read the startin \n");
			} /* Re-start read() if interrupted by signal */
	good_guess = 0;
	for (i = 0; i <word_length; i++) {
 		if (guess [0] == all_word [i]) {
 		good_guess = 1;
 		part_word [i] = all_word [i];
 		}
 	}
 	if (! good_guess) lives--;
 	if (strcmp (all_word, part_word) == 0)
 		game_state = 'W'; /* W ==> User Won */
 	else if (lives == 0) {
 		game_state = 'L'; /* L ==> User Lost */
 		strcpy (part_word, all_word); /* User Show the word */
		
 	}
 	sprintf (outbuf, "%s %d \n", part_word, lives);
 	write (out, outbuf, strlen (outbuf));
 	}

}
